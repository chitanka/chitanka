{% extends 'layout.html.twig' %}

{% set title %}
	<div class="row">
		{% for text in texts %}
			<div class="col-xs-{{ grid_cols }}">
				{% include 'Text/title.html.twig' with {'id_suffix': loop.index, 'obj_count': obj_count * loop.index} %}
			</div>
		{% endfor %}
	</div>
{% endset %}

{% block body_class %}{{ parent() }} hide-sidebar{% endblock %}

{% block content %}
	<div class="row">
		{% for text in texts %}
			<div class="col-xs-{{ grid_cols }}">
				{% include 'Text/leading_tabs.html.twig' with {'id_suffix': loop.index} %}
			</div>
		{% endfor %}
	</div>
	<div class="row">
		{% for text in texts %}
			<div class="col-xs-{{ grid_cols }}">
				{% include 'Text/toc.html.twig' with {'id_suffix': loop.index} %}
			</div>
		{% endfor %}
	</div>
	<button class="btn btn-default handle-edit-juxtaposed-texts" title="Промяна на съпоставените абзаци" style="position: absolute; top: 0; right: 0" data-credentials="{{ constant('App\\Entity\\User::GROUP_EDIT_JUXTAPOSED_TEXTS') }}"><span class="fa fa-sliders"></span></button>
	<div class="row juxtaposed-texts" id="textstart">
		{% for text in texts %}
			<div class="col-xs-{{ grid_cols }}">
				{% if text.blocked %}
					<div class="removed-notice">{{ text.removedNotice|raw }}</div>
				{% else %}
					{% include 'Text/content.html.twig' with {'id_suffix': loop.index, 'obj_count': obj_count * loop.index} %}
					{% include 'Text/end_message.html.twig' with {'id_suffix': loop.index} %}
				{% endif %}
			</div>
		{% endfor %}
	</div>
{% endblock %}

{% block inline_js %}
<script>
void function() {

const skippedParagraphs = {{ textCombinations|json_encode|raw }} || {};
const texts = $(".text-content-main");
const allParagraphBlocks = texts.map(function() {
	return $(this).find('p:not(.empty-line,.separator),.subheader');
});

function alignParagraphs() {
	texts.addClass('aligned-paragraphs');
	texts.find('.dummy-spacer').remove();
	const paragraphBlocks = removeSkippedParagraphs(allParagraphBlocks);
	const maxNbOfPs = Math.max(...paragraphBlocks.map(function() {
		return $(this).length;
	}).get());
	for (let i = 0; i < maxNbOfPs; i++) {
		const correspondingParagraphs = paragraphBlocks.map(function() {
			const $par = $(this).eq(i);
			return $par.length > 0 ? { par: $par, top: $par.offset().top } : undefined;
		}).get().filter(function(e) {
			return e !== undefined;
		});
		if (correspondingParagraphs.length < 2) {
			continue;
		}
		correspondingParagraphs.sort(function(p1, p2) {
			return p1.top < p2.top ? 1 : -1; // reverse sort
		});
		for (let oi = 1; oi < correspondingParagraphs.length; oi++) {
			const topDiff = correspondingParagraphs[0].top - correspondingParagraphs[oi].top;
			if (topDiff > 0) {
				correspondingParagraphs[oi].par.before('<div class="dummy-spacer" style="height:'+topDiff+'px"></div>');
			}
		}
	}
}
function removeSkippedParagraphs(paragraphBlocks) {
	const filteredParagraphBlocks = $(paragraphBlocks.get());
	return filteredParagraphBlocks.each(function(bIndex) {
		const textId = texts.get(bIndex).getAttribute('data-id');
		if (!skippedParagraphs[textId]) {
			return true;
		}
		filteredParagraphBlocks[bIndex] = $(this).filter(function() {
			const paragraphId = this.getAttribute('data-id');
			const isSkipped = skippedParagraphs[textId].indexOf(paragraphId) !== -1;
			if (isSkipped) {
				$(this).addClass('skipped');
			} else {
				$(this).removeClass('skipped');
			}
			return !isSkipped;
		});
	});
}
function putChainLinks(paragraphBlocks) {
	paragraphBlocks.each(function(bIndex) {
		const textId = texts.get(bIndex).getAttribute('data-id');
		if (!skippedParagraphs[textId]) {
			skippedParagraphs[textId] = [];
		}
		this.each(function() {
			const paragraphId = this.getAttribute('data-id');
			$('<a class="chain-link fa fa-link"></a>').on('click', function() {
				const eventualIndexOfSkippedParagraph = skippedParagraphs[textId].indexOf(paragraphId);
				if (eventualIndexOfSkippedParagraph !== -1) {
					skippedParagraphs[textId].splice(eventualIndexOfSkippedParagraph, 1);
				} else {
					skippedParagraphs[textId].push(paragraphId);
				}
				alignParagraphs();
			}).prependTo(this);
		});
	});
}
function unAlignParagraphs() {
	texts.removeClass('aligned-paragraphs').find('.dummy-spacer').remove();
}

function enableJuxtaposedEditing() {
	texts.addClass('editing-enabled');
	putChainLinks(allParagraphBlocks);
	$('<button class="btn btn-primary" style="box-shadow: 0 0 20px #808080"><i class="fa fa-save"></i> Запис на съпоставените абзаци</button>').on('click', function() {
		const url = {{ path('app_textcombination_save')|json_encode|raw }};
		const $button = $(this).addClass('disabled');
		$.post(url, JSON.stringify(skippedParagraphs)).done(function(){
			const $successMarker = $('<i class="fa fa-check" style="margin-left: 0.67em; font-size: 125%"></i>').insertAfter($button);
			setTimeout(function (){
				$successMarker.remove();
			}, 1500);
		}).fail(function() {
			$button.after('Стана някакъв проблем при записването.');
		}).always(function() {
			$button.removeClass('disabled').blur();
		});
	}).insertBefore('#textstart').wrap('<div class="text-center actions navbar-fixed-top"></div>');
	enableJuxtaposedEditingForNextLinks();
}

function enableJuxtaposedEditingForNextLinks() {
	$('a[rel="next"]').each(function() {
		const hashChar = '#';
		const urlParts = this.href.split(hashChar);
		urlParts[0] += '?editing=on';
		this.href = urlParts.join(hashChar);
	});
}

function prepareJuxtaposedEditing() {
	$('.handle-edit-juxtaposed-texts').on('click', function(){
		if (user.canTakeAction(this)) {
			enableJuxtaposedEditing();
			$(this).remove();
		} else {
			window.alert('Нямате необходимите права за това действие.');
		}
	}).prependTo('.juxtaposed-texts');
}

function executeWhenImagesAreLoaded($images, func) {
	Promise.all($images.map(function() {
		return new Promise((resolve, reject) => {
			const image = new Image();
			image.src = this.src;
			image.onload = resolve;
			image.onerror = resolve;
		});
	}).get()).then(func);
}

	const isEditingAutoEnabled = new URLSearchParams(location.search).get('editing') === 'on';
	if (isEditingAutoEnabled) {
		enableJuxtaposedEditing();
	} else {
		prepareJuxtaposedEditing();
	}

	const images = texts.find('img');
	if (images.length === 0) {
		alignParagraphs();
	} else { // make sure that all images are loaded because they will mess up the alignment if they get loaded afterwards
		executeWhenImagesAreLoaded(images, alignParagraphs);
	}
}()
</script>
{% endblock %}
